From maltito at scm.berlios.de  Tue Mar 12 22:47:54 2013
From: maltito at scm.berlios.de (maltito at scm.berlios.de)
Date: Tue, 12 Mar 2013 22:47:54 +0100
Subject: [deepamehta-svn] r389 - trunk/develop/src/de/deepamehta/service/web
Message-ID: <20130312214754.5038C55B0C@scm.berlios.de>

Author: maltito
Date: 2013-03-12 22:47:53 +0100 (Tue, 12 Mar 2013)
New Revision: 389

Modified:
   trunk/develop/src/de/deepamehta/service/web/JSONRPCServlet.java
Log:
Minor optimization in JSONRPCServlet.

Until now, one new Session obects was created by DM for ANY READ request made to the implementing service.

Session objects are not created anymorefor POST Requests.

Modified: trunk/develop/src/de/deepamehta/service/web/JSONRPCServlet.java
===================================================================
--- trunk/develop/src/de/deepamehta/service/web/JSONRPCServlet.java	2012-10-21 19:38:00 UTC (rev 388)
+++ trunk/develop/src/de/deepamehta/service/web/JSONRPCServlet.java	2013-03-12 21:47:53 UTC (rev 389)
@@ -218,9 +218,9 @@
 															throws IOException, ServletException {
 		RequestParameter params = new RequestParameter(request);
 		String method = request.getMethod();
-    Session session = getSession(request);
 		CorporateDirectives directives = new CorporateDirectives();
         if (method.equals("GET")) {
+            Session session = getSession(request);
             System.out.println("> JSONRPCServlet got delegates a GET request to ImplementingClass.performAction() hook");
             String page = "Print";
             if (params.getPathInfo().length() >= 3) {
@@ -262,11 +262,11 @@
             remoteMethodCall = requestBody.substring(methodStart + 11, paramStart - 3);
             // rest is json parameter array
             remoteParams = requestBody.substring(paramStart + 10, requestBody.length() - 1);
-            System.out.println(">>> JSONRPCServlet: " + method + " / " +requestBody);
+            // System.out.println(">>> JSONRPCServlet: " + method + " / " +requestBody);
           }
           in.close();
           // --- trigger performPostrequest() hook
-          String result = performPostRequest(remoteMethodCall, remoteParams, session, directives);
+          String result = performPostRequest(remoteMethodCall, remoteParams, null, directives);
           if(result.equals("")) {
             // response.setStatus(response.SC_INTERNAL_SERVER_ERROR);
             System.out.println(" === JSONRPC === *** unexpected result *** " + result + " setting response to continue...");
@@ -274,7 +274,7 @@
           } else {
             response.setStatus(response.SC_OK);
             response.setContentType("application/json");
-            System.out.println(">>> RESPONSE BODY: written in "+response.getCharacterEncoding()+"\r");
+            // System.out.println(">>> RESPONSE BODY: written in "+response.getCharacterEncoding()+"\r");
             // write back
             PrintWriter writer = response.getWriter();
             writer.write(result);
@@ -282,9 +282,8 @@
             writer.close();
           }
         }
-        // process directives
-		directives.updateCorporateMemory(as, session, null, null);
-		// Note: topicmapID=null, viewmode=null ### should be OK because in web interface there is no "default topicmap"
+        // process directives is never needed, since JSONRPC-Servlets just provide READ operations
+        // directives.updateCorporateMemory(as, null, null, null);
 	}
 
 	private void redirectToPage(String page, HttpServletRequest request, HttpServletResponse response)


